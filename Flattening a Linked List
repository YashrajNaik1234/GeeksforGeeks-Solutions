class Solution {
  public:
    Node* merge(Node* list1, Node* list2){
        Node* dummy = new Node(-1);
        Node* res = dummy;

        while(list1 and list2){
            if(list1 -> data < list2 -> data){
                res -> bottom = list1;
                res = list1;
                list1 = list1 -> bottom;
            }
            else{
                res -> bottom = list2;
                res = list2;
                list2 = list2 -> bottom;
            }

            res -> next = nullptr;
        }

        if(list1) res -> bottom = list1;
        else res -> bottom = list2;
        if(dummy -> bottom) dummy -> bottom -> next == nullptr;
        return dummy -> bottom;
    }
    // Function which returns the  root of the flattened linked list.
    Node *flatten(Node *head) {
        // Your code here
        if(!head or !(head -> next)) return head;

        Node* mergeHead = flatten(head -> next);
        head = merge(head, mergeHead);
        return head;
    }
};
